/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/comments": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comments.id"];
          createdAt?: parameters["rowFilter.comments.createdAt"];
          body?: parameters["rowFilter.comments.body"];
          authorId?: parameters["rowFilter.comments.authorId"];
          discussionId?: parameters["rowFilter.comments.discussionId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["comments"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** comments */
          comments?: definitions["comments"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comments.id"];
          createdAt?: parameters["rowFilter.comments.createdAt"];
          body?: parameters["rowFilter.comments.body"];
          authorId?: parameters["rowFilter.comments.authorId"];
          discussionId?: parameters["rowFilter.comments.discussionId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comments.id"];
          createdAt?: parameters["rowFilter.comments.createdAt"];
          body?: parameters["rowFilter.comments.body"];
          authorId?: parameters["rowFilter.comments.authorId"];
          discussionId?: parameters["rowFilter.comments.discussionId"];
        };
        body: {
          /** comments */
          comments?: definitions["comments"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/discussions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.discussions.id"];
          createdAt?: parameters["rowFilter.discussions.createdAt"];
          title?: parameters["rowFilter.discussions.title"];
          body?: parameters["rowFilter.discussions.body"];
          teamId?: parameters["rowFilter.discussions.teamId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["discussions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** discussions */
          discussions?: definitions["discussions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.discussions.id"];
          createdAt?: parameters["rowFilter.discussions.createdAt"];
          title?: parameters["rowFilter.discussions.title"];
          body?: parameters["rowFilter.discussions.body"];
          teamId?: parameters["rowFilter.discussions.teamId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.discussions.id"];
          createdAt?: parameters["rowFilter.discussions.createdAt"];
          title?: parameters["rowFilter.discussions.title"];
          body?: parameters["rowFilter.discussions.body"];
          teamId?: parameters["rowFilter.discussions.teamId"];
        };
        body: {
          /** discussions */
          discussions?: definitions["discussions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/suppen": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.suppen.id"];
          created_at?: parameters["rowFilter.suppen.created_at"];
          title?: parameters["rowFilter.suppen.title"];
          body?: parameters["rowFilter.suppen.body"];
          Float?: parameters["rowFilter.suppen.Float"];
          ForeignKeyTest?: parameters["rowFilter.suppen.ForeignKeyTest"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["suppen"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** suppen */
          suppen?: definitions["suppen"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.suppen.id"];
          created_at?: parameters["rowFilter.suppen.created_at"];
          title?: parameters["rowFilter.suppen.title"];
          body?: parameters["rowFilter.suppen.body"];
          Float?: parameters["rowFilter.suppen.Float"];
          ForeignKeyTest?: parameters["rowFilter.suppen.ForeignKeyTest"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.suppen.id"];
          created_at?: parameters["rowFilter.suppen.created_at"];
          title?: parameters["rowFilter.suppen.title"];
          body?: parameters["rowFilter.suppen.body"];
          Float?: parameters["rowFilter.suppen.Float"];
          ForeignKeyTest?: parameters["rowFilter.suppen.ForeignKeyTest"];
        };
        body: {
          /** suppen */
          suppen?: definitions["suppen"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          createdAt?: parameters["rowFilter.users.createdAt"];
          firstName?: parameters["rowFilter.users.firstName"];
          lastName?: parameters["rowFilter.users.lastName"];
          role?: parameters["rowFilter.users.role"];
          bio?: parameters["rowFilter.users.bio"];
          email?: parameters["rowFilter.users.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          createdAt?: parameters["rowFilter.users.createdAt"];
          firstName?: parameters["rowFilter.users.firstName"];
          lastName?: parameters["rowFilter.users.lastName"];
          role?: parameters["rowFilter.users.role"];
          bio?: parameters["rowFilter.users.bio"];
          email?: parameters["rowFilter.users.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          createdAt?: parameters["rowFilter.users.createdAt"];
          firstName?: parameters["rowFilter.users.firstName"];
          lastName?: parameters["rowFilter.users.lastName"];
          role?: parameters["rowFilter.users.role"];
          bio?: parameters["rowFilter.users.bio"];
          email?: parameters["rowFilter.users.email"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  comments: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /** Format: text */
    body?: string;
    /** Format: character varying */
    authorId?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `discussions.id`.<fk table='discussions' column='id'/>
     */
    discussionId?: number;
  };
  discussions: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt?: string;
    /** Format: character varying */
    title?: string;
    /** Format: text */
    body?: string;
    /** Format: character varying */
    teamId?: string;
  };
  suppen: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: character varying */
    title: string;
    /** Format: text */
    body?: string;
    /** Format: real */
    Float?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `discussions.id`.<fk table='discussions' column='id'/>
     */
    ForeignKeyTest?: number;
  };
  users: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt: string;
    /** Format: character varying */
    firstName: string;
    /** Format: character varying */
    lastName: string;
    /** Format: character varying */
    role: string;
    /** Format: text */
    bio?: string;
    /** Format: character varying */
    email: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description comments */
  "body.comments": definitions["comments"];
  /** Format: bigint */
  "rowFilter.comments.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.comments.createdAt": string;
  /** Format: text */
  "rowFilter.comments.body": string;
  /** Format: character varying */
  "rowFilter.comments.authorId": string;
  /** Format: bigint */
  "rowFilter.comments.discussionId": string;
  /** @description discussions */
  "body.discussions": definitions["discussions"];
  /** Format: bigint */
  "rowFilter.discussions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.discussions.createdAt": string;
  /** Format: character varying */
  "rowFilter.discussions.title": string;
  /** Format: text */
  "rowFilter.discussions.body": string;
  /** Format: character varying */
  "rowFilter.discussions.teamId": string;
  /** @description suppen */
  "body.suppen": definitions["suppen"];
  /** Format: bigint */
  "rowFilter.suppen.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.suppen.created_at": string;
  /** Format: character varying */
  "rowFilter.suppen.title": string;
  /** Format: text */
  "rowFilter.suppen.body": string;
  /** Format: real */
  "rowFilter.suppen.Float": string;
  /** Format: bigint */
  "rowFilter.suppen.ForeignKeyTest": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: bigint */
  "rowFilter.users.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.createdAt": string;
  /** Format: character varying */
  "rowFilter.users.firstName": string;
  /** Format: character varying */
  "rowFilter.users.lastName": string;
  /** Format: character varying */
  "rowFilter.users.role": string;
  /** Format: text */
  "rowFilter.users.bio": string;
  /** Format: character varying */
  "rowFilter.users.email": string;
}

export interface operations {}

export interface external {}

import { PlusIcon } from '@heroicons/react/outline';
import * as z from 'zod';

import { Button } from '@/components/Elements';
import { Form, FormDrawer, InputField, Toggle } from '@/components/Form';
import { Authorization, ROLES } from '@/lib/authorization';

import { Create{{properCase name}}DTO, useCreate{{properCase name}} } from '../api/create{{properCase name}}';

const schema = z.object({
  {{#each types}}
    {{camelCase this.name}}: z.{{lowerCase this.type}}(){{#unless this.optional}}.min(1, 'Required'){{/unless}},
  {{/each}}
});

export const Create{{properCase name}} = () => {
  const create{{properCase name}}Mutation = useCreate{{properCase name}}();

  return (
    <Authorization allowedRoles={[ROLES.ADMIN]}>
      <FormDrawer
        isDone={create{{properCase name}}Mutation.isSuccess}
        triggerButton={
          <Button size="sm" startIcon={<PlusIcon className="h-4 w-4" />}>
            Create {{properCase name}}
          </Button>
        }
        title="Create {{properCase name}}"
        submitButton={
          <Button
            form="create-{{dashCase name}}"
            type="submit"
            size="sm"
            isLoading={create{{properCase name}}Mutation.isLoading}
          >
            Submit
          </Button>
        }
      >
        <Form<Create{{properCase name}}DTO['data'], typeof schema>
          id="create-{{dashCase name}}"
          onSubmit={async (values) => {
            await create{{properCase name}}Mutation.mutateAsync({ data: values });
          }}
          schema={schema}
        >
          {({ register, formState }) => (
            <>
              {{#each types}}
              {{#unless (isBoolean this.type)}}
              <InputField
                  label="{{properCase this.name}}"
                  type="{{lowerCase this.type}}"
                  error={formState.errors['{{camelCase this.name}}']}
                  registration={register('{{camelCase this.name}}')}
              />
              {{/unless}}
              {{#if (isBoolean this.type)}}
                <Toggle
                    error={formState.errors['{{camelCase this.name}}']}
                    registration={register('{{camelCase this.name}}')}
                />
               {{/if}}
              {{/each}}
            </>
          )}
        </Form>
      </FormDrawer>
    </Authorization>
  );
};

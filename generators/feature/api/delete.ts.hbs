import { useMutation } from "react-query";
import { MutationConfig, queryClient } from "@/lib/react-query";
import { useNotificationStore } from "@/stores/notifications";

import { {{properCase name}}Type } from "../types";
import { supabase } from "@/lib/initSupabase";

export const delete{{properCase name}} = async ({
  {{camelCase name}}Id,
}: {
  {{camelCase name}}Id: number;
}) => {
  const { data, error } = await supabase
    .from<{{properCase name}}Type>("{{dashCase name}}")
    .delete()
    .match({ id: {{camelCase name}}Id });

  if (error !== null) throw Error();

  return data;
};

type UseDelete{{properCase name}}Options = {
  config?: MutationConfig<typeof delete{{properCase name}}>;
};

export const useDelete{{properCase name}} = ({
  config,
}: UseDelete{{properCase name}}Options = {}) => {
  const { addNotification } = useNotificationStore();

  return useMutation({
    onMutate: async (deleted{{properCase name}}) => {
      await queryClient.cancelQueries("{{dashCase name}}s");

      const previous{{properCase name}}s =
        queryClient.getQueryData<{{properCase name}}Type[]>("{{dashCase name}}s");

      queryClient.setQueryData(
        "{{dashCase name}}s",
        previous{{properCase name}}s?.filter(
          ({{camelCase name}}) => {{camelCase name}}.id !== deleted{{properCase name}}.{{camelCase name}}Id
        )
      );

      return { previous{{properCase name}}s };
    },
    onError: (_, __, context: any) => {
      if (context?.previous{{properCase name}}s) {
        queryClient.setQueryData("{{dashCase name}}s", context.previous{{properCase name}}s);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries("{{dashCase name}}s");
      addNotification({
        type: "success",
        title: "{{properCase name}} Deleted",
      });
    },
    ...config,
    mutationFn: delete{{properCase name}},
  });
};

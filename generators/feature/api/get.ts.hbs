import { useQuery } from "react-query";
import { ExtractFnReturnType, QueryConfig } from "@/lib/react-query";

import { {{properCase name}}Type } from "../types";
import { supabase } from "@/lib/initSupabase";

export const get{{properCase name}} = async ({
  {{camelCase name}}Id,
}: {
  {{camelCase name}}Id: string;
}): Promise<{{properCase name}}Type | undefined> => {
  const { data: {{camelCase name}} } = await supabase
    .from<{{properCase name}}Type>("{{dashCase name}}")
    .select()
    .eq("id", {{camelCase name}}Id);

  if ({{camelCase name}} === null) throw Error();

  return {{camelCase name}}[0];
};

type QueryFnType = typeof get{{properCase name}};

type Use{{properCase name}}Options = {
  {{camelCase name}}Id: string;
  config?: QueryConfig<QueryFnType>;
};

export const use{{properCase name}} = ({
  {{camelCase name}}Id,
  config,
}: Use{{properCase name}}Options) => {
  return useQuery<ExtractFnReturnType<QueryFnType>>({
    ...config,
    queryKey: ["{{dashCase name}}", {{camelCase name}}Id],
    queryFn: () => get{{properCase name}}({ {{camelCase name}}Id }),
  });
};
